#!/usr/bin/python3

import sys
import os
import subprocess
import logging
import tempfile
import xml.etree.ElementTree as ET
from collections import defaultdict
import copy


class SVGFigExporter:
    def __init__(self, filename):
        self.filename = filename
        self.xml = ET.parse(filename)
        self.document = self.xml.getroot()
        self.namespaces = {
            'sodipodi': "http://sodipodi.sourceforge.net/DTD/sodipodi-0.dtd",
            "inkscape": "http://www.inkscape.org/namespaces/inkscape",
            "svg": "http://www.w3.org/2000/svg",
        }
    
    def get_layers(self):
        svg_layers = self.document.findall('svg:g[@inkscape:groupmode="layer"]',
                                           self.namespaces)
        layers = []
        for layer in svg_layers:
            label_attrib_name = "{%s}label" % self.namespaces['inkscape']
            if label_attrib_name not in layer.attrib:
                continue

            layer_id = layer.attrib["id"]
            layer_label = layer.attrib[label_attrib_name]

            layers.append((layer_id, layer_label))
        return layers

    def calculate_views(self):
        layers = self.get_layers()
        max_layer = 0
        page_list = defaultdict(list)
        for (g_id, desc) in layers:
            pages = set()
            for elem in desc.split(","):
                if '-' in elem:
                    from_, till_ = elem.split("-")
                    pages.update(range(int(from_.strip()), int(till_.strip())+1))
                else:
                    pages.add(int(elem.strip()))
            for page in pages:
                page_list[page].append(g_id)
        return page_list

    def export_layer(self, layers):
        """
        """
        temp = tempfile.NamedTemporaryFile(suffix=".svg")
        doc = copy.deepcopy(self.xml)
        for layer in doc.findall('svg:g[@inkscape:groupmode="layer"]',
                                 self.namespaces):
            layer.attrib['style'] = 'display:none'
            id = layer.attrib["id"]
            if id in layers:
                layer.attrib['style'] = 'display:inline'

        doc.write(temp.name)
        temp.flush()
        return temp


    def export_to_pdf(self, svg_path, output_path):
        command = "inkscape %s -A %s" % (svg_path, output_path)
        print(command)
        p = subprocess.Popen(command, shell=True,
                             stdout=subprocess.PIPE,
                             stderr=subprocess.PIPE)
        p.wait()

    def export(self):

        page_list = self.calculate_views()
        actions =""
        files = []
        pdfs = []
        for page in sorted(page_list):
            element_list = page_list[page]

            fd = self.export_layer(element_list)
            pdf = tempfile.NamedTemporaryFile(suffix=".pdf")
            files += [fd, pdf]
            actions += f"file-open:{fd.name};export-filename:{pdf.name};export-type:pdf;"
            actions += "export-overwrite;export-do;"

            pdfs.append(pdf.name)

        logging.info("Run inkscape on %s", self.filename)
        subprocess.check_call(["inkscape", "--batch-process",
                               "--actions", actions],
                              env={"DISPLAY":""})

        pdftk = ["pdftk"]
        for pdf in pdfs:
            if os.path.exists(pdf) and os.stat(pdf).st_size > 0:
                pdftk.append(pdf)
        base, _ = os.path.splitext(self.filename)
        pdftk += ["cat", "output", base + ".pdf"]

        subprocess.check_call(pdftk)
        print("Produced: ", base +".pdf")



def main():
    f = SVGFigExporter(sys.argv[1])
    f.export()


if __name__ == "__main__":
    main()
