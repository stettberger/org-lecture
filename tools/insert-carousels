#!/usr/bin/python3.8

import sys
import os
import glob
import logging
import re
import shlex
logging.basicConfig(level=logging.INFO)
from collections import OrderedDict
from common import parse_topic_line, parse_block_src

def make_carousel(label, title, files):
    ret = []
    if len(files) == 1:
        ret += '#+BEGIN_EXPORT html\n'
        ret += '   <img class="slide d-block w-100" src="'+files[0]+'"/>\n'
        ret += '#+END_EXPORT\n'
        return ret

    ret += '#+BEGIN_EXPORT html\n'
    ret += '<div class="content">'
    ret += '<p class="marginnote"><a class="graphic-button" href="'+base+'.sources.html#block-'+label+'">Graphiken und Animationen</a></p>'
    if title:
        ret += f'<span class="marginnote">Folien: {title}</span>\n'
    ret += '<div class="container">'
    ret += '<div id="slides-' + label +'" class="carousel" data-wrap="false" data-interval="0" data-ride="carousel">'
    ret += '<ol class="carousel-indicators">'
    li_opts = f'data-target="#slides-{label}"'
    ret += f'<li {li_opts} data-slide-to="0" class="active"></li>'
    for i in range(1, len(files)):
        ret += f'<li {li_opts} data-slide-to="'+str(i)+'"></li>'
    ret += '</ol>'
    ret += '<div class="carousel-inner">'
    active="active"
    for fn in files:
        ret += '<div class="carousel-item '+ active + '">'
        # On the image we will add an handler in org-bootstrap.js
        ret += '   <img class="slide d-block w-100" src="'+fn+'"/>'
        ret += '</div>'
        active=''
    ret += '</div>'
    ret += '<a class="carousel-control-prev" href="#slides-'+label+'" data-slide="prev">'
    ret += '<span class="carousel-control-prev-icon" aria-hidden="true"></span>'
    ret += '<span class="sr-only">Previous</span>'
    ret += '</a>'
    ret += '<a class="carousel-control-next" href="#slides-'+label+'" data-slide="next">'
    ret += '<span class="carousel-control-next-icon" aria-hidden="true"></span>'
    ret += '<span class="sr-only">Next</span>'
    ret += '</a>'
    ret += '</div>\n'
    ret += '</div>\n'
    ret += '</div>\n'
    ret += '#+END_EXPORT\n'
    return ret

def make_sources_html(tex_log_fd, html_fd):
    html_fd.write("<html><body>")
    topic = None
    block_number = 0
    heading = False
    files = []

    def source_block():
        html_fd.write(f"<div style='min-height: 100vh'> <h2 id='block-{block_number}'>Block {block_number}, {topic}</h2>\n")
        if files:
            html_fd.write("<ul>")
            for fn, page in files:
                html_fd.write(f"<li><a href='{fn}'>{fn}</a>, Page {page}\n")
                html_fd.write("</li>\n")
            html_fd.write("</ul>")
        else:
            html_fd.write(f"<p>In diesem Abschnitt gab es keine Graphiken</p>\n")
        html_fd.write("</div>")



    for line in tex_log_fd.readlines():
        if line.startswith("Topic:"):
            topic = line[len("Topic:"):].strip()
            block_number += 1
            source_block()
            files = []

        if m := re.match("<use (.*?), page ([0-9]+)>$", line):
            fn, page = m.groups()
            if "fig/" not in fn:
                fn = "fig/" + fn
            if (fn, page) not in files:
                files.append((fn, page))

    if files:
        source_block()


def find_blocks(lines):
    start_line = None
    for idx, line in enumerate(lines):
        line = parse_block_src(line)
        if not line: continue
        if line['type'] == 'begin_src' and line['language'] == 'latex':
            start_line = line
            start_line['idx'] = idx

        if line['type'] == 'end_src' and start_line and start_line['tangle']:
            yield(start_line['idx'], idx, start_line['title'])
            start_line = None

if __name__ == "__main__":
    if len(sys.argv) != 3:
        print(f"usage: {sys.argv[0]} [ORG-FILE] [TOPIC-FILE]")

    org, topics_fn = sys.argv[1:]
    basename = os.path.basename(topics_fn)
    global base
    base,_ = os.path.splitext(basename)
    output_dir = f"build/html"
    with open(topics_fn, "rb") as fd:
        topics = OrderedDict()
        for line in fd.readlines():
            (pages, block, topic) = parse_topic_line(line)
            topics[(topic, block)] = []
            for page in range(pages[0], pages[1] + 1):
                fn = f"{output_dir}/{base}/slide-{page:04d}.svg"
                assert os.path.exists(fn)
                fn = os.path.relpath(fn, output_dir)
                topics[(topic, block)].append(fn)
            logging.info("Block %s slides: %s", block, len(topics[(topic, block)]))
            logging.debug(topic)

    with open(topics_fn.replace(".topics", ".log")) as tex_log_fd:
        with open(f"{output_dir}/{base}.sources.html", "w+") as html_fd:
            make_sources_html(tex_log_fd, html_fd)

    with open(org) as fd:
        lines = list(fd.readlines())
        blocks = list(find_blocks(lines))
        for (topic,block_number), svgs in reversed(topics.items()):
            start, end, title = blocks[int(block_number)-1]
            lines[start:end+1] = make_carousel(block_number, title, svgs)

        print("".join(lines))
