#!/usr/bin/python3

import sys
import os
os.environ['NUMEXPR_MAX_THREADS'] = '1'

import glob
import logging
import re
import shlex
logging.basicConfig(level=logging.INFO)
from collections import OrderedDict
import pandas as pd



def make_carousel(label, files):
    ret = []
    if len(files) == 1:
        ret += '#+BEGIN_EXPORT html\n'
        ret += '   <img class="slide-beamer d-block w-100" src="'+files[0]+'"/>\n'
        ret += '#+END_EXPORT\n'
        return ret

    carousel_id = "slides-" + label

    ret += '#+BEGIN_EXPORT html\n'
    ret += '<div class="content">'
    # ret += '<p class="marginnote"><a class="graphic-button" href="'+base+'.sources.html#block-'+label+'">Graphiken und Animationen</a></p>'
    #if title:
    #    ret += f'<span class="marginnote">Folien: {title}</span>\n'
    ret += '<div class="container">'
    # data-bs-wrap="false" 
    ret += f'<div id="{carousel_id}" class="carousel" data-bs-wrap="false" data-bs-interval="0" data-bs-ride="carousel">'

    ## Controls
    ret += '<div class="carousel-indicators">'
    active = ' class="active" aria-current="true"'
    for i in range(0, len(files)):
        ret += f'<button type="button" data-bs-target="#{carousel_id}" data-bs-slide-to="{i}" aria-label="Slide {i}"{active}></button>'
        active = ''
    ret += '</div>'

    ## Slides
    ret += '<div class="carousel-inner">'
    active="active"
    for fn in files:
        ret += f'<div class="carousel-item {active}">'
        # On the image we will add an handler in org-bootstrap.js
        ret += '   <img class="slide-beamer d-block w-100" src="'+fn+'"/>'
        ret += '</div>'
        active=''
    ret += '</div>'

    ### Arrows
    ret += '<a class="carousel-control-prev" href="#slides-'+label+'" data-bs-slide="prev">'
    ret += '   <span class="carousel-control-prev-icon" aria-hidden="true"></span>'
    ret += '   <span class="visually-hidden">Previous</span>'
    ret += '</a>'
    ret += '<a class="carousel-control-next" href="#slides-'+label+'" data-bs-slide="next">'
    ret += '   <span class="carousel-control-next-icon" aria-hidden="true"></span>'
    ret += '  <span class="visually-hidden">Next</span>'
    ret += '</a>'
    ret += '</div>\n'
    ret += '</div>\n' # container
    ret += '</div>\n' # content
    ret += '#+END_EXPORT\n'
    return ret

def make_sources_html(tex_log_fd, html_fd):
    html_fd.write("<html><body>")
    topic = None
    block_number = 0
    heading = False
    files = []

    def source_block():
        html_fd.write(f"<div style='min-height: 100vh'> <h2 id='block-{block_number}'>Block {block_number}, {topic}</h2>\n")
        if files:
            html_fd.write("<ul>")
            for fn, page in files:
                html_fd.write(f"<li><a href='{fn}'>{fn}</a>, Page {page}\n")
                html_fd.write("</li>\n")
            html_fd.write("</ul>")
        else:
            html_fd.write(f"<p>In diesem Abschnitt gab es keine Graphiken</p>\n")
        html_fd.write("</div>")



    for line in tex_log_fd.readlines():
        if line.startswith("Topic:"):
            topic = line[len("Topic:"):].strip()
            block_number += 1
            source_block()
            files = []

        if m := re.match("<use (.*?), page ([0-9]+)>$", line):
            fn, page = m.groups()
            if "fig/" not in fn:
                fn = "fig/" + fn
            if (fn, page) not in files:
                files.append((fn, page))

    if files:
        source_block()


def find_blocks(lines):
    start_line = None
    block_id = 1
    data = []
    for idx, line in enumerate(lines):
        line = parse_block_src(line)
        if not line: continue
        if line['type'] == 'begin_src' and line['language'] == 'latex':
            start_line = line
            start_line['idx'] = idx

        if line['type'] == 'end_src' and start_line and start_line['tangle']:
            data.append(
                (f'block-{block_id}', start_line['idx'], idx)
            )
            start_line = None
            block_id += 1
    return pd.DataFrame(data=data, columns=['label', 'orgRangeStart', 'orgRangeEnd'])

def parse_block_src(line):
    if "#+begin_src" in line.lower():
        tokens = shlex.split(line)
        def with_attr(key):
            if key in tokens:
                return tokens[tokens.index(key)+1]
        ret = {'type': 'begin_src',
               'line': line,
               'language': tokens[1],
               'tangle': with_attr(':tangle') != "no"}
        return ret

    if "#+end_src" in line.lower():
        return {'type': 'end_src', 'line': line}

def read_topics(topics_fn):
    df =  pd.read_csv(topics_fn, delimiter="|")
    logging.info("Topics:\n" + df.to_string())

    df['pdfRangeStart'] = df.pdfRange.str.split('-').transform(lambda x: int(x[0]))
    df['pdfRangeEnd'] = df.pdfRange.str.split('-').transform(lambda x: int(x[1]))
    return df

if __name__ == "__main__":
    if len(sys.argv) == 1:
        print(f"usage: {sys.argv[0]} [ORG-FILE] <TOPIC-FILE...>")

    org = sys.argv[1]
    dfs = []
    for topics_fn in sys.argv[2:]:
        logging.info("Reading Topic File: %s", topics_fn)
        assert os.path.exists(topics_fn), topics_fn

        basename = os.path.basename(topics_fn)
        global base
        base,_ = os.path.splitext(basename)
        output_dir = f"build/html"

        topics = read_topics(topics_fn)
        topics['pdfBase'] = base
        dfs.append(topics)

        log = topics_fn.replace(".topics", ".log")
        if os.path.exists(log):
            with open(log) as tex_log_fd:
                with open(f"{output_dir}/{base}.sources.html", "w+") as html_fd:
                    make_sources_html(tex_log_fd, html_fd)

    if len(dfs) == 0:
        logging.warning("Called insert-carousel without topics file")
        with open(org) as fd:
            print(fd.read())
        sys.exit(0)
    else:
        topics = pd.concat(dfs)


    # 2. Step: Open the ORG file and replace all source blocks with "CAROUSEL:" lines
    with open(org) as fd:
        lines = list(fd.readlines())
        blocks = find_blocks(lines)
        if len(blocks) > 0:
            logging.info("Blocks:\n %s", blocks.to_string())

            # Sanity check that our parsed information and the topic file match
            df = topics.merge(blocks, on='label', how='outer')
            mismatch = (df.orgBlockStart != (df.orgRangeStart+1)) & ~df.orgBlockStart.isna()
            if mismatch.any():
                logging.error("Mismatch in Information from topic file and find_blocks():\n", df[mismatch])
                sys.exit(-1)

    # Replace org source blocks with CAROUSEL statements
    for (_, row) in reversed(list(blocks[~blocks.orgRangeStart.isna()].iterrows())):
        lines[row.orgRangeStart:row.orgRangeEnd+1] = ['CAROUSEL:' + row.label]

    for lineno, line in reversed(list(enumerate(lines))):
        line = line.strip()
        if line.startswith("CAROUSEL:"):
            label = line.split(":",1)[1].strip()
            df = topics[topics.label == label]
            if len(df) != 1:
                logging.error(f'CAROUSEL `{label}`: not found or unambigious.')
                sys.exit(-1)

            carousel = df.iloc[0]
            svgs = []
            for page in range(carousel.pdfRangeStart, carousel.pdfRangeEnd+1):
                fn = f"{output_dir}/{carousel.pdfBase}/slide-{page:04d}.svg"
                if not os.path.exists(fn):
                    logging.error(f"CAROUSEL {label}: slide {fn} not found")
                    sys.exit(-1)

                fn = os.path.relpath(fn, output_dir)
                svgs.append(fn)

            lines[lineno:lineno+1] = make_carousel(label, svgs)

    print("".join(lines))
